<template><% var formColumns=table.columns.filter(item=>{ return item.formtype!='none'})%>
  <el-form :inline="<{if table.formLayout == '1r2c'}>true<{else}>false<{/if}>" class="m-form" ref="form" :model="form" :rules="rules" label-width="<{if table.labelWidth }><{table.labelWidth}>px<{else}>80px<{/if}>"><{each formColumns}><{if $value.formtype=='text'}>
    <el-form-item class="m-form-item" label="<{$value.remark}>" prop="<{$value.javaProperty}>">
      <el-input type="text" v-model="form.<{$value.javaProperty}>" placeholder="请输入<{$value.remark}>"></el-input>
    </el-form-item><{else if $value.formtype == 'password'}>
    <el-form-item class="m-form-item" label="<{$value.remark}>" prop="<{$value.javaProperty}>">
      <el-input type="password" v-model="form.<{$value.javaProperty}>" placeholder="请输入<{$value.remark}>"></el-input>
    </el-form-item><{else if $value.formtype == 'textarea'}>
    <el-form-item class="m-form-item" label="<{$value.remark}>" prop="<{$value.javaProperty}>">
      <el-input type="textarea" v-model="form.<{$value.javaProperty}>" placeholder="请输入<{$value.remark}>"></el-input>
    </el-form-item><{else if $value.formtype == 'radio'}>
    <el-form-item class="m-form-item" label="<{$value.remark}>" prop="<{$value.javaProperty}>"><{each $value.ext.items as val indexx }>
      <el-radio v-model="form.<{$value.javaProperty}>" :label="<{@ val.value}>"><{val.label}></el-radio><{/each}>
    </el-form-item><{else if $value.formtype == 'checkbox'}>
    <el-form-item class="m-form-item" label="<{$value.remark}>" prop="<{$value.javaProperty}>">
      <el-checkbox-group v-model="form.<{$value.javaProperty}>"><{each $value.ext.items as val indexx }>
        <el-checkbox :label="<{@ val.value}>"><{val.label}></el-checkbox><{/each}>
      </el-checkbox-group>
    </el-form-item><{else if $value.formtype == 'select'}>
    <el-form-item class="m-form-item" label="<{$value.remark}>" prop="<{$value.javaProperty}>">
      <el-select v-model="form.<{$value.javaProperty}>" placeholder="请选择<{$value.remark}>"><{each $value.ext.items as val indexx }>
        <el-option label="<{val.label}>" :value="<{@ val.value}>"></el-option><{/each}>
      </el-select>
    </el-form-item><{else if $value.formtype == 'dict'}>
    <el-form-item class="m-form-item" label="<{$value.remark}>" prop="<{$value.javaProperty}>">
      <m-dict mode="form" v-model="form.<{$value.javaProperty}>" dict-key="<{$value.ext.dictKey}>"<{if $value.ext.type}> type="<{$value.ext.type}>"<{/if}>></m-dict>
    </el-form-item><{else if $value.formtype == 'mselect'}>
    <el-form-item class="m-form-item" label="<{$value.remark}>" prop="<{$value.javaProperty}>">
      <m-select<{if $value.ext.multiple}> multiple<{/if}> :is-edit="isEdit" v-model="form.<{$value.javaProperty}>" url="<{$value.ext.url}>"<{if $value.ext.valueKey}> value-key="$value.ext.valueKey"<{/if}><{if $value.ext.labelKey}> label-key="$value.ext.labelKey"<{/if}><{if $value.ext.searchKey}> search-key="$value.ext.searchKey"<{/if}>></m-select>
    </el-form-item><{else if $value.formtype == 'selectTree'}>
    <el-form-item class="m-form-item" label="<{$value.remark}>" prop="<{$value.javaProperty}>">
      <m-select-tree<{if $value.ext.showRoot==false}> :show-root="false"<{/if}><{if $value.ext.multiple}> multiple<{/if}><{if $value.ext.defaultExpandAll}> default-expand-all<{/if}> :is-edit="isEdit||isTree" v-model="form.<{$value.javaProperty}>" url="<{$value.ext.url}>"<{if $value.ext.placeholder}> placeholder="$value.ext.placeholder"<{/if}><{if $value.ext.dialogTitle}> dialog-title="$value.ext.dialogTitle"<{/if}><{if $value.ext.dialogWidth}> dialog-width="$value.ext.dialogWidth"<{/if}>></m-select-tree>
    </el-form-item><{/if}><{/each}>
  </el-form>
</template>
<script>
import { save as save<%=table.tableCameName.replace(moduleName,'')%>, update as update<%=table.tableCameName.replace(moduleName,'')%>, get as get<%=table.tableCameName.replace(moduleName,'')%> } from '@/api/<%=moduleName%>/<%=moduleName%>.<%=table.tableCameName.replace(moduleName,'').charAt(0).toLowerCase()+table.tableCameName.replace(moduleName,'').slice(1)%>.service.js'

export default {
  props: {
    isEdit: {
      type: Boolean,
      default: false
    },
    isTree: {
      type: Boolean,
      default: false
    },
    id: {
      type: [String, Number],
      default: undefined
    }
  },
  data() {
    return {
      form: {<{each formColumns}>
        <{$value.javaProperty}>: <{@ $value.defaultValue}>,<{/each}>
        id: undefined
      },
      rules: {<{each formColumns}><{if $index<formColumns.length-1}>
        <{$value.javaProperty}>: [
          { required: <{if $value.required}>true<{else}>false<{/if}>, message: '<{$value.remark}>不能为空', trigger: 'blur' }
        ],<{else}>
        <{$value.javaProperty}>: [
          { required: <{if $value.required}>true<{else}>false<{/if}>, message: '<{$value.remark}>不能为空', trigger: 'blur' }
        ]<{/if}><{/each}>
      }
    }
  },
  watch: {
    id(n, o) {
      this.getDetails()
    }
  },
  mounted() {
    this.getDetails()
  },
  methods: {
    submit(isShowMessage = 1) {
      return new Promise((resolve, reject) => {
        this.$refs['form'].validate((valid) => {
          if (valid) {
            if (this.isEdit) {
              update<%=table.tableCameName.replace(moduleName,'')%>(this.form).then(res => {
                if (isShowMessage) {
                  if (res.code === 0) {
                    this.$message({
                      message: res.msg || '操作成功',
                      type: 'success'
                    })
                  }
                }
                resolve(res)
              }).catch(e => {
                reject(e)
              })
            } else {
              delete this.form.id
              save<%=table.tableCameName.replace(moduleName,'')%>(this.form).then(res => {
                if (isShowMessage) {
                  if (res.code === 0) {
                    this.$message({
                      message: res.msg || '操作成功',
                      type: 'success'
                    })
                  }
                }
                resolve(res)
              }).catch(e => {
                reject(e)
              })
            }
          } else {
            reject(new Error('error'))
          }
        })
      })
    },
    resetFields() {
      this.$refs['form'].resetFields()
      this.$refs['form'].clearValidate()
    },
    getDetails() {<{if table.isTree}>
      if (this.id) {
        get<%=table.tableCameName.replace(moduleName,'')%>({
          id: this.id
        }).then(res => {
          if (this.isEdit) {
            this.form = this.$util.copy(res.data, this.form)
          } else {
            this.$set(this.form, 'parentId', res.data.id)
          }
        })
      }<{else}>
      if (this.isEdit && this.id) {
        get<%=table.tableCameName.replace(moduleName,'')%>({
          id: this.id
        }).then(res => {
          this.form = this.$util.copy(res.data, this.form)
        })
      }<{/if}>
    }
  }
}
</script>
<style lang="scss" scoped><{if table.formLayout == '1r2c'}>
.m-form {
  font-size:0;// 解决空白折叠问题
  .m-form-item {
    width: 50%;
    margin-right:0px; // 重写默认margin-right:10px;
  }
}<{/if}>
</style>
